{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOm5vtP6qa0vtDLtwJicg9J",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/komalbarge45/BigDataWork/blob/master/1095709_1dconv_reg\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AS5bxT2ycoEL",
        "colab_type": "text"
      },
      "source": [
        "### **Assignment 1**\n",
        "Nonlinear Regression using Deep Convolutional Neural network\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BO94ZStFTza4",
        "colab_type": "code",
        "outputId": "ad799257-df7d-4d34-8582-07db75f9095d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        }
      },
      "source": [
        "# Pandas library: To read the dataset\n",
        "import pandas as pd\n",
        "# Read the dataset 'housing.csv'\n",
        "dataset = pd.read_csv('/content/housing.csv')\n",
        "# Print first 10 records with the help head(n) function\n",
        "tenRecords = dataset.head(10)\n",
        "print('The first 10 records of the dataset:')\n",
        "tenRecords"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The first 10 records of the dataset:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>median_house_value</th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-122.23</td>\n",
              "      <td>37.88</td>\n",
              "      <td>41.0</td>\n",
              "      <td>880.0</td>\n",
              "      <td>129.0</td>\n",
              "      <td>322.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>8.3252</td>\n",
              "      <td>452600.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-122.22</td>\n",
              "      <td>37.86</td>\n",
              "      <td>21.0</td>\n",
              "      <td>7099.0</td>\n",
              "      <td>1106.0</td>\n",
              "      <td>2401.0</td>\n",
              "      <td>1138.0</td>\n",
              "      <td>8.3014</td>\n",
              "      <td>358500.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-122.24</td>\n",
              "      <td>37.85</td>\n",
              "      <td>52.0</td>\n",
              "      <td>1467.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>496.0</td>\n",
              "      <td>177.0</td>\n",
              "      <td>7.2574</td>\n",
              "      <td>352100.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-122.25</td>\n",
              "      <td>37.85</td>\n",
              "      <td>52.0</td>\n",
              "      <td>1274.0</td>\n",
              "      <td>235.0</td>\n",
              "      <td>558.0</td>\n",
              "      <td>219.0</td>\n",
              "      <td>5.6431</td>\n",
              "      <td>341300.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-122.25</td>\n",
              "      <td>37.85</td>\n",
              "      <td>52.0</td>\n",
              "      <td>1627.0</td>\n",
              "      <td>280.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>259.0</td>\n",
              "      <td>3.8462</td>\n",
              "      <td>342200.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-122.25</td>\n",
              "      <td>37.85</td>\n",
              "      <td>52.0</td>\n",
              "      <td>919.0</td>\n",
              "      <td>213.0</td>\n",
              "      <td>413.0</td>\n",
              "      <td>193.0</td>\n",
              "      <td>4.0368</td>\n",
              "      <td>269700.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-122.25</td>\n",
              "      <td>37.84</td>\n",
              "      <td>52.0</td>\n",
              "      <td>2535.0</td>\n",
              "      <td>489.0</td>\n",
              "      <td>1094.0</td>\n",
              "      <td>514.0</td>\n",
              "      <td>3.6591</td>\n",
              "      <td>299200.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-122.25</td>\n",
              "      <td>37.84</td>\n",
              "      <td>52.0</td>\n",
              "      <td>3104.0</td>\n",
              "      <td>687.0</td>\n",
              "      <td>1157.0</td>\n",
              "      <td>647.0</td>\n",
              "      <td>3.1200</td>\n",
              "      <td>241400.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>-122.26</td>\n",
              "      <td>37.84</td>\n",
              "      <td>42.0</td>\n",
              "      <td>2555.0</td>\n",
              "      <td>665.0</td>\n",
              "      <td>1206.0</td>\n",
              "      <td>595.0</td>\n",
              "      <td>2.0804</td>\n",
              "      <td>226700.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>-122.25</td>\n",
              "      <td>37.84</td>\n",
              "      <td>52.0</td>\n",
              "      <td>3549.0</td>\n",
              "      <td>707.0</td>\n",
              "      <td>1551.0</td>\n",
              "      <td>714.0</td>\n",
              "      <td>3.6912</td>\n",
              "      <td>261100.0</td>\n",
              "      <td>NEAR BAY</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   longitude  latitude  ...  median_house_value  ocean_proximity\n",
              "0    -122.23     37.88  ...            452600.0         NEAR BAY\n",
              "1    -122.22     37.86  ...            358500.0         NEAR BAY\n",
              "2    -122.24     37.85  ...            352100.0         NEAR BAY\n",
              "3    -122.25     37.85  ...            341300.0         NEAR BAY\n",
              "4    -122.25     37.85  ...            342200.0         NEAR BAY\n",
              "5    -122.25     37.85  ...            269700.0         NEAR BAY\n",
              "6    -122.25     37.84  ...            299200.0         NEAR BAY\n",
              "7    -122.25     37.84  ...            241400.0         NEAR BAY\n",
              "8    -122.26     37.84  ...            226700.0         NEAR BAY\n",
              "9    -122.25     37.84  ...            261100.0         NEAR BAY\n",
              "\n",
              "[10 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y5lpYtuzaRoA",
        "colab_type": "text"
      },
      "source": [
        "Plotting of dataset features for first 40 samples."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X23M_5kmZJsa",
        "colab_type": "code",
        "outputId": "4e38c329-493d-4a9a-9780-eed47d30f730",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "columns = dataset.columns.drop(['ocean_proximity'])\n",
        "datasetSampleForGraph = dataset.head(40)\n",
        "fig, ax = plt.subplots(nrows=9, ncols=1)\n",
        "x_data = range(0,datasetSampleForGraph.shape[0])\n",
        "i=0\n",
        "# Plot the feature subplots for given housing dataset\n",
        "# Each feature will be having a seperate subplot\n",
        "print('                     Housing Dataset')\n",
        "for column in columns:\n",
        "  ax[i].plot(x_data, datasetSampleForGraph[column], label=column)\n",
        "  ax[i].legend()\n",
        "  i = i + 1"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                     Housing Dataset\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 9 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ug0m7bD1hS9l",
        "colab_type": "text"
      },
      "source": [
        "Nonlinear regression model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dzzu7OG81E4T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Remove any incomplete entries\n",
        "dataset=dataset.dropna()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VaUphg4cx2mA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#We will predict the \"median_house_value\" column\n",
        "Y = dataset['median_house_value']\n",
        "\n",
        "X=dataset.loc[:,'longitude':'median_income']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rmKn0wpc4o8C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Split the dataset into 70:30 ratio\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test = train_test_split(X, Y, test_size=0.3)\n",
        "\n",
        "#Converts the datasets to numpy arrays to work with PyTorch model\n",
        "x_train_np=x_train.to_numpy()\n",
        "y_train_np=y_train.to_numpy()\n",
        "#Convert the testing data\n",
        "x_test_np=x_test.to_numpy()\n",
        "y_test_np=y_test.to_numpy()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dHK6rHUwA9eO",
        "colab_type": "code",
        "outputId": "28d4cc9c-b3fe-4a02-cea4-1b36c83bd12c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "import torch\n",
        "#1D convolutional layer, we are inputting 1-dimensional row of data.\n",
        "from torch.nn import Conv1d\n",
        "#max pooling layer\n",
        "from torch.nn import MaxPool1d\n",
        "from torch.nn import Flatten\n",
        "from torch.nn import Linear\n",
        "from torch.nn.functional import relu\n",
        "from torch.nn import BatchNorm1d\n",
        "\n",
        "#dataloader is for taking the dataset from tensordataset and input it in minibatchsizes\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from torch.optim import Adam\n",
        "from torch.nn import L1Loss\n",
        "\n",
        "!pip install pytorch-ignite\n",
        "from ignite.contrib.metrics.regression.r2_score import R2Score"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pytorch-ignite in /usr/local/lib/python3.6/dist-packages (0.3.0)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (from pytorch-ignite) (1.4.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iN8sisxNCdbw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#define the model\n",
        "class CnnRegressor(torch.nn.Module):\n",
        "\n",
        "  def __init__(self, batch_size, inputs, outputs):\n",
        "    super(CnnRegressor, self).__init__()\n",
        "    self.batch_size = batch_size\n",
        "    self.inputs = inputs\n",
        "    self.outputs = outputs\n",
        "    #Convolutional block consists of convolutional layer, Max pooling layer,\n",
        "    #Batch_Normalization layer\n",
        "\n",
        "    #Define the input layer - 1st convolutional layer\n",
        "    self.input_layer = Conv1d(inputs, batch_size, 1)\n",
        "    self.batchNorm = BatchNorm1d(batch_size)\n",
        "    self.max_pooling_layer = MaxPool1d(1)\n",
        "\n",
        "    #Define 2nd convolutional block\n",
        "    self.conv_layer = Conv1d(batch_size, 128, 1)\n",
        "    self.batchNorm1 = BatchNorm1d(128)\n",
        "    self.max_pooling_layer1 = MaxPool1d(1)\n",
        "    #Define 3rd convolutional block\n",
        "    self.conv_layer1 = Conv1d(128, 128, 1)\n",
        "    self.batchNorm2 = BatchNorm1d(128)\n",
        "    self.max_pooling_layer2 = MaxPool1d(1)\n",
        "    #Define 4th convolutional block\n",
        "    self.conv_layer2 = Conv1d(128, 128, 1)\n",
        "    self.batchNorm3 = BatchNorm1d(128)\n",
        "    self.max_pooling_layer3 = MaxPool1d(1)\n",
        "    #Define 5th convolutional block\n",
        "    self.conv_layer3 = Conv1d(128, 128, 1)\n",
        "    self.batchNorm4 = BatchNorm1d(128)\n",
        "    self.max_pooling_layer4 = MaxPool1d(1)\n",
        "    #Define 6th convolutional block\n",
        "    self.conv_layer4 = Conv1d(128, 128, 1)\n",
        "    self.batchNorm5 = BatchNorm1d(128)\n",
        "    self.max_pooling_layer5 = MaxPool1d(1)\n",
        "\n",
        "    #it becomes single FC regular NN after flattening\n",
        "    self.flatten_layer = Flatten()\n",
        "\n",
        "    #First linear layer\n",
        "    #input channels = 128, output  = 64\n",
        "    self.linear_layer1 = Linear(128,64)\n",
        "    #second linear layer\n",
        "    self.linear_layer2 = Linear(64,32)\n",
        "    #Third linear layer\n",
        "    self.linear_layer3 = Linear(32,32)\n",
        "    #Output layer with 1real value as an output\n",
        "    self.output_layer = Linear(32, outputs)\n",
        "\n",
        "  # A method to feed inputs through the model\n",
        "  def feed(self, input):\n",
        "    #Reshape is converting the 2D inputs to 3D model as it expects\n",
        "    #3D array to prcoess in 1D fashion\n",
        "    input = input.reshape((self.batch_size, self.inputs, 1))\n",
        "    output = self.input_layer(input)\n",
        "    output = relu(self.batchNorm(output))\n",
        "\n",
        "    output = self.max_pooling_layer(output)\n",
        "\n",
        "    #Relu as an activation layer to get a nonlinear regression model\n",
        "    output = self.max_pooling_layer1(relu(self.batchNorm1(self.conv_layer(output))))\n",
        "    output = self.max_pooling_layer2(relu(self.batchNorm2(self.conv_layer1(output))))\n",
        "    output = self.max_pooling_layer3(relu(self.batchNorm3(self.conv_layer2(output))))\n",
        "    output = self.max_pooling_layer4(relu(self.batchNorm4(self.conv_layer3(output))))\n",
        "    output = self.max_pooling_layer5(relu(self.batchNorm5(self.conv_layer4(output))))\n",
        "\n",
        "    output = self.flatten_layer(output)\n",
        "\n",
        "    output = self.linear_layer1(output)\n",
        "    output = self.linear_layer2(output)\n",
        "    output = self.linear_layer3(output)\n",
        "    \n",
        "    output = self.output_layer(output)\n",
        "    return output"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aAZgZfqsGNZY",
        "colab_type": "code",
        "outputId": "07b52961-e19e-4d3c-8c99-efc5a4ba25a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        }
      },
      "source": [
        "#Define the model\n",
        "batch_size = 128\n",
        "#Batch size, inputs and outputs\n",
        "model = CnnRegressor(batch_size, X.shape[1], 1)\n",
        "model.cuda()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CnnRegressor(\n",
              "  (input_layer): Conv1d(8, 128, kernel_size=(1,), stride=(1,))\n",
              "  (batchNorm): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (max_pooling_layer): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n",
              "  (conv_layer): Conv1d(128, 128, kernel_size=(1,), stride=(1,))\n",
              "  (batchNorm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (max_pooling_layer1): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n",
              "  (conv_layer1): Conv1d(128, 128, kernel_size=(1,), stride=(1,))\n",
              "  (batchNorm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (max_pooling_layer2): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n",
              "  (conv_layer2): Conv1d(128, 128, kernel_size=(1,), stride=(1,))\n",
              "  (batchNorm3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (max_pooling_layer3): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n",
              "  (conv_layer3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))\n",
              "  (batchNorm4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (max_pooling_layer4): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n",
              "  (conv_layer4): Conv1d(128, 128, kernel_size=(1,), stride=(1,))\n",
              "  (batchNorm5): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (max_pooling_layer5): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n",
              "  (flatten_layer): Flatten()\n",
              "  (linear_layer1): Linear(in_features=128, out_features=64, bias=True)\n",
              "  (linear_layer2): Linear(in_features=64, out_features=32, bias=True)\n",
              "  (linear_layer3): Linear(in_features=32, out_features=32, bias=True)\n",
              "  (output_layer): Linear(in_features=32, out_features=1, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JEdd7Cy8GbEA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# This method will return the average L1 loss and R2 score\n",
        "def model_loss(model, dataset, train = False, optimizer = None):\n",
        "  #Cycle through the batches and get avg L1 loss\n",
        "  performance = L1Loss()\n",
        "  score_metric = R2Score()\n",
        "\n",
        "  avg_loss = 0\n",
        "  avg_score = 0\n",
        "  count = 0\n",
        "  for input, output in iter(dataset):\n",
        "    #Model's predictoins for the training dataset\n",
        "    predictions = model.feed(input)\n",
        "\n",
        "    #Model's loss\n",
        "    loss = performance(predictions, output)\n",
        "\n",
        "    #Get the model's R2 score\n",
        "    score_metric.update([predictions, output])\n",
        "    score = score_metric.compute()\n",
        "\n",
        "    if(train):\n",
        "      #clear errors so that they dont accumulate\n",
        "      optimizer.zero_grad()\n",
        "      #compute gradients for our optimizer\n",
        "      loss.backward()\n",
        "      #use optimizer to update the model's parameters based on the gradients\n",
        "      optimizer.step()\n",
        "\n",
        "    #store the loss and update the counter\n",
        "    avg_loss += loss.item()\n",
        "    avg_score += score\n",
        "    count += 1\n",
        "  return avg_loss / count, avg_score / count"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FlB_iDRKGlTV",
        "colab_type": "code",
        "outputId": "701838e0-db65-4645-f246-5d7e488b85ae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "from time import time\n",
        "start_time = time()\n",
        "#Train the model\n",
        "epochs = 300\n",
        "#Use Adam as an optimization algorithm instead of SGD for fast convergence\n",
        "#Adam always outperforms SGD in CNN\n",
        "optimizer = Adam(model.parameters(), lr=0.001)\n",
        "inputs = torch.from_numpy(x_train_np).cuda().float()\n",
        "outputs = torch.from_numpy(y_train_np.reshape(y_train_np.shape[0], 1)).cuda().float()\n",
        "\n",
        "#Create a dataloader instance to work with our batches\n",
        "tensor = TensorDataset(inputs, outputs)\n",
        "loader = DataLoader(tensor, batch_size, shuffle=True, drop_last=True)\n",
        "\n",
        "for epoch in range(epochs):\n",
        "  avg_loss, avg_r2_score = model_loss(model, loader, train=True, optimizer=optimizer)\n",
        "\n",
        "  print(\"Epoch \" + str(epoch+1) + \":\\n\\tLoss = \" + str(avg_loss) + \"\\n\\tR^2 Score = \" + str(avg_r2_score))\n",
        "#### Time taken for training the model\n",
        "time_taken = time() - start_time\n",
        "print(\"Inference time: %.4f s\" % time_taken)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1:\n",
            "\tLoss = 205605.50140765766\n",
            "\tR^2 Score = -3.208303416748671\n",
            "Epoch 2:\n",
            "\tLoss = 137461.65033783784\n",
            "\tR^2 Score = -2.197215409559009\n",
            "Epoch 3:\n",
            "\tLoss = 72475.57140343469\n",
            "\tR^2 Score = 0.26655212819087043\n",
            "Epoch 4:\n",
            "\tLoss = 67692.47022804055\n",
            "\tR^2 Score = 0.37404189626996903\n",
            "Epoch 5:\n",
            "\tLoss = 66145.00682713964\n",
            "\tR^2 Score = 0.40749195429248597\n",
            "Epoch 6:\n",
            "\tLoss = 63463.136789132885\n",
            "\tR^2 Score = 0.44565661114641786\n",
            "Epoch 7:\n",
            "\tLoss = 59516.76235219595\n",
            "\tR^2 Score = 0.4927927514296112\n",
            "Epoch 8:\n",
            "\tLoss = 55663.31619510135\n",
            "\tR^2 Score = 0.5710735949226051\n",
            "Epoch 9:\n",
            "\tLoss = 52330.81964386261\n",
            "\tR^2 Score = 0.6138693859694498\n",
            "Epoch 10:\n",
            "\tLoss = 50777.72145974099\n",
            "\tR^2 Score = 0.6242413198026884\n",
            "Epoch 11:\n",
            "\tLoss = 49537.66096565315\n",
            "\tR^2 Score = 0.6451881039368987\n",
            "Epoch 12:\n",
            "\tLoss = 49198.83340371621\n",
            "\tR^2 Score = 0.6354141217907981\n",
            "Epoch 13:\n",
            "\tLoss = 48204.27051661036\n",
            "\tR^2 Score = 0.6519663299299273\n",
            "Epoch 14:\n",
            "\tLoss = 47569.984375\n",
            "\tR^2 Score = 0.666838683639823\n",
            "Epoch 15:\n",
            "\tLoss = 46984.190526463964\n",
            "\tR^2 Score = 0.6606236535168678\n",
            "Epoch 16:\n",
            "\tLoss = 46359.67648507883\n",
            "\tR^2 Score = 0.6745215148860793\n",
            "Epoch 17:\n",
            "\tLoss = 45611.8223536036\n",
            "\tR^2 Score = 0.6869482795084587\n",
            "Epoch 18:\n",
            "\tLoss = 45460.54838823198\n",
            "\tR^2 Score = 0.6972282284233154\n",
            "Epoch 19:\n",
            "\tLoss = 44486.02276886261\n",
            "\tR^2 Score = 0.6899665605730749\n",
            "Epoch 20:\n",
            "\tLoss = 44435.611785613735\n",
            "\tR^2 Score = 0.716448459286453\n",
            "Epoch 21:\n",
            "\tLoss = 44175.69112471847\n",
            "\tR^2 Score = 0.6908935784011391\n",
            "Epoch 22:\n",
            "\tLoss = 43398.949517877256\n",
            "\tR^2 Score = 0.7118039639490034\n",
            "Epoch 23:\n",
            "\tLoss = 44209.08108108108\n",
            "\tR^2 Score = 0.6973798271304805\n",
            "Epoch 24:\n",
            "\tLoss = 43967.92662584459\n",
            "\tR^2 Score = 0.6914557562347832\n",
            "Epoch 25:\n",
            "\tLoss = 44069.21160613739\n",
            "\tR^2 Score = 0.6918824815163052\n",
            "Epoch 26:\n",
            "\tLoss = 43276.15505349099\n",
            "\tR^2 Score = 0.7144448139427303\n",
            "Epoch 27:\n",
            "\tLoss = 43747.60536317567\n",
            "\tR^2 Score = 0.7015343791862569\n",
            "Epoch 28:\n",
            "\tLoss = 42335.11803209459\n",
            "\tR^2 Score = 0.7265673827281187\n",
            "Epoch 29:\n",
            "\tLoss = 43002.68162302928\n",
            "\tR^2 Score = 0.7106987012251612\n",
            "Epoch 30:\n",
            "\tLoss = 42683.64569256757\n",
            "\tR^2 Score = 0.7167256445048737\n",
            "Epoch 31:\n",
            "\tLoss = 43119.24121973536\n",
            "\tR^2 Score = 0.7058092661421841\n",
            "Epoch 32:\n",
            "\tLoss = 42081.6420678491\n",
            "\tR^2 Score = 0.72607363345129\n",
            "Epoch 33:\n",
            "\tLoss = 43541.30880489865\n",
            "\tR^2 Score = 0.7052068118114097\n",
            "Epoch 34:\n",
            "\tLoss = 42922.67979307433\n",
            "\tR^2 Score = 0.7088554077697733\n",
            "Epoch 35:\n",
            "\tLoss = 42260.42831503379\n",
            "\tR^2 Score = 0.712777679074704\n",
            "Epoch 36:\n",
            "\tLoss = 42006.07969101914\n",
            "\tR^2 Score = 0.7363911357084126\n",
            "Epoch 37:\n",
            "\tLoss = 41816.853216497744\n",
            "\tR^2 Score = 0.7151829574674219\n",
            "Epoch 38:\n",
            "\tLoss = 41755.77607685811\n",
            "\tR^2 Score = 0.7287419019083821\n",
            "Epoch 39:\n",
            "\tLoss = 41435.48303772522\n",
            "\tR^2 Score = 0.7229998502463756\n",
            "Epoch 40:\n",
            "\tLoss = 41260.46797578829\n",
            "\tR^2 Score = 0.7306884911723134\n",
            "Epoch 41:\n",
            "\tLoss = 42120.68074324324\n",
            "\tR^2 Score = 0.720913053422057\n",
            "Epoch 42:\n",
            "\tLoss = 42140.609304617115\n",
            "\tR^2 Score = 0.7132556842636479\n",
            "Epoch 43:\n",
            "\tLoss = 41444.61833122185\n",
            "\tR^2 Score = 0.734060361855919\n",
            "Epoch 44:\n",
            "\tLoss = 41848.77224099099\n",
            "\tR^2 Score = 0.7270775087520802\n",
            "Epoch 45:\n",
            "\tLoss = 41564.74018158784\n",
            "\tR^2 Score = 0.7272213547201734\n",
            "Epoch 46:\n",
            "\tLoss = 41353.47357122748\n",
            "\tR^2 Score = 0.7382315921641349\n",
            "Epoch 47:\n",
            "\tLoss = 40793.11787373311\n",
            "\tR^2 Score = 0.7456582533477479\n",
            "Epoch 48:\n",
            "\tLoss = 40874.230591920044\n",
            "\tR^2 Score = 0.7257250399493701\n",
            "Epoch 49:\n",
            "\tLoss = 41362.5121410473\n",
            "\tR^2 Score = 0.7338882959756926\n",
            "Epoch 50:\n",
            "\tLoss = 41099.689329954956\n",
            "\tR^2 Score = 0.7454397195647983\n",
            "Epoch 51:\n",
            "\tLoss = 41084.20988175676\n",
            "\tR^2 Score = 0.7393321727116599\n",
            "Epoch 52:\n",
            "\tLoss = 41175.69534769144\n",
            "\tR^2 Score = 0.7325483040014087\n",
            "Epoch 53:\n",
            "\tLoss = 40986.46927787162\n",
            "\tR^2 Score = 0.7320558649869366\n",
            "Epoch 54:\n",
            "\tLoss = 40602.59916948198\n",
            "\tR^2 Score = 0.7345700858776201\n",
            "Epoch 55:\n",
            "\tLoss = 41041.80737964527\n",
            "\tR^2 Score = 0.7309193130768882\n",
            "Epoch 56:\n",
            "\tLoss = 40383.764498873876\n",
            "\tR^2 Score = 0.7417662443764893\n",
            "Epoch 57:\n",
            "\tLoss = 40882.9380102759\n",
            "\tR^2 Score = 0.741720602661493\n",
            "Epoch 58:\n",
            "\tLoss = 40473.01578336149\n",
            "\tR^2 Score = 0.7391646186588935\n",
            "Epoch 59:\n",
            "\tLoss = 40615.61929898649\n",
            "\tR^2 Score = 0.7348632733797128\n",
            "Epoch 60:\n",
            "\tLoss = 41082.461588541664\n",
            "\tR^2 Score = 0.7388498440302738\n",
            "Epoch 61:\n",
            "\tLoss = 40584.30241765203\n",
            "\tR^2 Score = 0.735069523494021\n",
            "Epoch 62:\n",
            "\tLoss = 40344.25779490428\n",
            "\tR^2 Score = 0.7425687785022351\n",
            "Epoch 63:\n",
            "\tLoss = 40528.02174831081\n",
            "\tR^2 Score = 0.7288189714738906\n",
            "Epoch 64:\n",
            "\tLoss = 40199.70032728041\n",
            "\tR^2 Score = 0.747066942116683\n",
            "Epoch 65:\n",
            "\tLoss = 40561.26852829392\n",
            "\tR^2 Score = 0.7450012182043609\n",
            "Epoch 66:\n",
            "\tLoss = 40564.97362401464\n",
            "\tR^2 Score = 0.7415335776876403\n",
            "Epoch 67:\n",
            "\tLoss = 40248.19860289978\n",
            "\tR^2 Score = 0.7365302805731597\n",
            "Epoch 68:\n",
            "\tLoss = 39939.73384712838\n",
            "\tR^2 Score = 0.7480529583695349\n",
            "Epoch 69:\n",
            "\tLoss = 40203.38789766329\n",
            "\tR^2 Score = 0.7470654270875361\n",
            "Epoch 70:\n",
            "\tLoss = 39815.7212134009\n",
            "\tR^2 Score = 0.7467220507391928\n",
            "Epoch 71:\n",
            "\tLoss = 39895.837292370496\n",
            "\tR^2 Score = 0.7434063555537003\n",
            "Epoch 72:\n",
            "\tLoss = 40114.2211254223\n",
            "\tR^2 Score = 0.749010534165304\n",
            "Epoch 73:\n",
            "\tLoss = 40530.18906601914\n",
            "\tR^2 Score = 0.734477036697404\n",
            "Epoch 74:\n",
            "\tLoss = 39661.61238386824\n",
            "\tR^2 Score = 0.7490076913105743\n",
            "Epoch 75:\n",
            "\tLoss = 39467.43632108671\n",
            "\tR^2 Score = 0.7521883540979689\n",
            "Epoch 76:\n",
            "\tLoss = 39807.00417018581\n",
            "\tR^2 Score = 0.7391285332486296\n",
            "Epoch 77:\n",
            "\tLoss = 39686.95761190879\n",
            "\tR^2 Score = 0.7521363697756155\n",
            "Epoch 78:\n",
            "\tLoss = 39764.23398789414\n",
            "\tR^2 Score = 0.748091887520918\n",
            "Epoch 79:\n",
            "\tLoss = 39526.43269636824\n",
            "\tR^2 Score = 0.7566491169967262\n",
            "Epoch 80:\n",
            "\tLoss = 39315.47855081644\n",
            "\tR^2 Score = 0.7424348142398501\n",
            "Epoch 81:\n",
            "\tLoss = 40326.49025197072\n",
            "\tR^2 Score = 0.7395300928203399\n",
            "Epoch 82:\n",
            "\tLoss = 39068.48990005631\n",
            "\tR^2 Score = 0.7548741575161708\n",
            "Epoch 83:\n",
            "\tLoss = 39518.925182995496\n",
            "\tR^2 Score = 0.7559582546322279\n",
            "Epoch 84:\n",
            "\tLoss = 39597.88692989865\n",
            "\tR^2 Score = 0.7393008294698975\n",
            "Epoch 85:\n",
            "\tLoss = 39182.14505912162\n",
            "\tR^2 Score = 0.7547196949933356\n",
            "Epoch 86:\n",
            "\tLoss = 39492.24466849662\n",
            "\tR^2 Score = 0.7513657287058788\n",
            "Epoch 87:\n",
            "\tLoss = 39168.205729166664\n",
            "\tR^2 Score = 0.74873374654329\n",
            "Epoch 88:\n",
            "\tLoss = 39421.52544341216\n",
            "\tR^2 Score = 0.7529374250840922\n",
            "Epoch 89:\n",
            "\tLoss = 38761.70228040541\n",
            "\tR^2 Score = 0.7512417658270217\n",
            "Epoch 90:\n",
            "\tLoss = 38770.85230152027\n",
            "\tR^2 Score = 0.7512489536851131\n",
            "Epoch 91:\n",
            "\tLoss = 39450.03149634009\n",
            "\tR^2 Score = 0.7486568072322033\n",
            "Epoch 92:\n",
            "\tLoss = 38824.883410754504\n",
            "\tR^2 Score = 0.7608923272411208\n",
            "Epoch 93:\n",
            "\tLoss = 38628.944855011265\n",
            "\tR^2 Score = 0.7627469091353926\n",
            "Epoch 94:\n",
            "\tLoss = 39324.84255349099\n",
            "\tR^2 Score = 0.7444718104050152\n",
            "Epoch 95:\n",
            "\tLoss = 38688.85214315879\n",
            "\tR^2 Score = 0.7611028543161674\n",
            "Epoch 96:\n",
            "\tLoss = 38765.45178772522\n",
            "\tR^2 Score = 0.7514095824058159\n",
            "Epoch 97:\n",
            "\tLoss = 38830.35765061937\n",
            "\tR^2 Score = 0.7482039939635948\n",
            "Epoch 98:\n",
            "\tLoss = 39039.35926942567\n",
            "\tR^2 Score = 0.7486963429753705\n",
            "Epoch 99:\n",
            "\tLoss = 38874.51875703829\n",
            "\tR^2 Score = 0.7582658949621309\n",
            "Epoch 100:\n",
            "\tLoss = 38944.81223606419\n",
            "\tR^2 Score = 0.7533048888626804\n",
            "Epoch 101:\n",
            "\tLoss = 38945.86343961149\n",
            "\tR^2 Score = 0.7566836750380088\n",
            "Epoch 102:\n",
            "\tLoss = 38664.99180039414\n",
            "\tR^2 Score = 0.7571960015651804\n",
            "Epoch 103:\n",
            "\tLoss = 38661.321808136265\n",
            "\tR^2 Score = 0.7522842713778581\n",
            "Epoch 104:\n",
            "\tLoss = 38373.40716497748\n",
            "\tR^2 Score = 0.7703258791159099\n",
            "Epoch 105:\n",
            "\tLoss = 38683.21996410473\n",
            "\tR^2 Score = 0.7508967580079922\n",
            "Epoch 106:\n",
            "\tLoss = 39017.66490709459\n",
            "\tR^2 Score = 0.7538075230438358\n",
            "Epoch 107:\n",
            "\tLoss = 38386.76882742117\n",
            "\tR^2 Score = 0.7626630960330265\n",
            "Epoch 108:\n",
            "\tLoss = 38160.55815385698\n",
            "\tR^2 Score = 0.7723618238186535\n",
            "Epoch 109:\n",
            "\tLoss = 38312.10546875\n",
            "\tR^2 Score = 0.7637026547052096\n",
            "Epoch 110:\n",
            "\tLoss = 38668.326295045044\n",
            "\tR^2 Score = 0.756788362774322\n",
            "Epoch 111:\n",
            "\tLoss = 38252.98375914978\n",
            "\tR^2 Score = 0.7654701593496154\n",
            "Epoch 112:\n",
            "\tLoss = 38432.28929124437\n",
            "\tR^2 Score = 0.7573153222771747\n",
            "Epoch 113:\n",
            "\tLoss = 38801.562799127256\n",
            "\tR^2 Score = 0.7453579062041016\n",
            "Epoch 114:\n",
            "\tLoss = 38110.877252252256\n",
            "\tR^2 Score = 0.7684014050497406\n",
            "Epoch 115:\n",
            "\tLoss = 37927.93632108671\n",
            "\tR^2 Score = 0.7731835073294023\n",
            "Epoch 116:\n",
            "\tLoss = 37858.96683206644\n",
            "\tR^2 Score = 0.7529071076815004\n",
            "Epoch 117:\n",
            "\tLoss = 38202.06709248311\n",
            "\tR^2 Score = 0.758748558109157\n",
            "Epoch 118:\n",
            "\tLoss = 38048.538517032655\n",
            "\tR^2 Score = 0.7679117989689023\n",
            "Epoch 119:\n",
            "\tLoss = 37784.34499929617\n",
            "\tR^2 Score = 0.7608914071614841\n",
            "Epoch 120:\n",
            "\tLoss = 37838.396079673425\n",
            "\tR^2 Score = 0.7585333536620977\n",
            "Epoch 121:\n",
            "\tLoss = 37857.00077421171\n",
            "\tR^2 Score = 0.7646893980328094\n",
            "Epoch 122:\n",
            "\tLoss = 38346.1391821509\n",
            "\tR^2 Score = 0.7588046625285156\n",
            "Epoch 123:\n",
            "\tLoss = 38272.98585304054\n",
            "\tR^2 Score = 0.7631637588677762\n",
            "Epoch 124:\n",
            "\tLoss = 37522.135170326575\n",
            "\tR^2 Score = 0.7704272038679565\n",
            "Epoch 125:\n",
            "\tLoss = 37975.70954743806\n",
            "\tR^2 Score = 0.7536665844365167\n",
            "Epoch 126:\n",
            "\tLoss = 37418.97045678491\n",
            "\tR^2 Score = 0.7755348377114528\n",
            "Epoch 127:\n",
            "\tLoss = 37522.814329954956\n",
            "\tR^2 Score = 0.7699097171295247\n",
            "Epoch 128:\n",
            "\tLoss = 37388.67388091216\n",
            "\tR^2 Score = 0.7690892402863655\n",
            "Epoch 129:\n",
            "\tLoss = 37771.17296593468\n",
            "\tR^2 Score = 0.7575014629144045\n",
            "Epoch 130:\n",
            "\tLoss = 37271.57896959459\n",
            "\tR^2 Score = 0.7736080021138397\n",
            "Epoch 131:\n",
            "\tLoss = 37351.18836219032\n",
            "\tR^2 Score = 0.7651605561638579\n",
            "Epoch 132:\n",
            "\tLoss = 37399.95242117117\n",
            "\tR^2 Score = 0.7712506926047432\n",
            "Epoch 133:\n",
            "\tLoss = 37543.50929054054\n",
            "\tR^2 Score = 0.7604556865861032\n",
            "Epoch 134:\n",
            "\tLoss = 36936.40538780968\n",
            "\tR^2 Score = 0.7726595805577465\n",
            "Epoch 135:\n",
            "\tLoss = 36858.19314822635\n",
            "\tR^2 Score = 0.7720018347470211\n",
            "Epoch 136:\n",
            "\tLoss = 37165.573198198195\n",
            "\tR^2 Score = 0.7705229668707348\n",
            "Epoch 137:\n",
            "\tLoss = 37081.56411880631\n",
            "\tR^2 Score = 0.7742090765377251\n",
            "Epoch 138:\n",
            "\tLoss = 37375.0112964527\n",
            "\tR^2 Score = 0.7622000889953385\n",
            "Epoch 139:\n",
            "\tLoss = 37389.38399141329\n",
            "\tR^2 Score = 0.770706070221146\n",
            "Epoch 140:\n",
            "\tLoss = 36627.290839667796\n",
            "\tR^2 Score = 0.7851885594885265\n",
            "Epoch 141:\n",
            "\tLoss = 36774.53033502252\n",
            "\tR^2 Score = 0.7659423259851845\n",
            "Epoch 142:\n",
            "\tLoss = 36677.791666666664\n",
            "\tR^2 Score = 0.7754535428849307\n",
            "Epoch 143:\n",
            "\tLoss = 36532.04263443131\n",
            "\tR^2 Score = 0.7833323682118812\n",
            "Epoch 144:\n",
            "\tLoss = 36370.28225295608\n",
            "\tR^2 Score = 0.7757316726837414\n",
            "Epoch 145:\n",
            "\tLoss = 36334.83321016329\n",
            "\tR^2 Score = 0.7802077753989962\n",
            "Epoch 146:\n",
            "\tLoss = 36711.27517947635\n",
            "\tR^2 Score = 0.7758948937196752\n",
            "Epoch 147:\n",
            "\tLoss = 35854.67213893581\n",
            "\tR^2 Score = 0.7869261425880706\n",
            "Epoch 148:\n",
            "\tLoss = 36515.04420045045\n",
            "\tR^2 Score = 0.7678232912109746\n",
            "Epoch 149:\n",
            "\tLoss = 36664.97267384572\n",
            "\tR^2 Score = 0.7764154925316157\n",
            "Epoch 150:\n",
            "\tLoss = 36322.47999366554\n",
            "\tR^2 Score = 0.7714553335630833\n",
            "Epoch 151:\n",
            "\tLoss = 36031.384765625\n",
            "\tR^2 Score = 0.7798494166686833\n",
            "Epoch 152:\n",
            "\tLoss = 36525.41522381757\n",
            "\tR^2 Score = 0.7779814037419928\n",
            "Epoch 153:\n",
            "\tLoss = 35900.99472128379\n",
            "\tR^2 Score = 0.7792017845374197\n",
            "Epoch 154:\n",
            "\tLoss = 36237.237982122744\n",
            "\tR^2 Score = 0.7900218166259058\n",
            "Epoch 155:\n",
            "\tLoss = 36020.59005489865\n",
            "\tR^2 Score = 0.7798843543019749\n",
            "Epoch 156:\n",
            "\tLoss = 35754.27760768581\n",
            "\tR^2 Score = 0.77825735870361\n",
            "Epoch 157:\n",
            "\tLoss = 35698.57541525901\n",
            "\tR^2 Score = 0.7855443527790417\n",
            "Epoch 158:\n",
            "\tLoss = 35650.24234586149\n",
            "\tR^2 Score = 0.7796020226064453\n",
            "Epoch 159:\n",
            "\tLoss = 35625.10279420045\n",
            "\tR^2 Score = 0.7864904059319127\n",
            "Epoch 160:\n",
            "\tLoss = 35417.15283643018\n",
            "\tR^2 Score = 0.788417031945793\n",
            "Epoch 161:\n",
            "\tLoss = 35751.37573902027\n",
            "\tR^2 Score = 0.7863123194546334\n",
            "Epoch 162:\n",
            "\tLoss = 35702.63202069257\n",
            "\tR^2 Score = 0.7762064550443002\n",
            "Epoch 163:\n",
            "\tLoss = 35622.399317286036\n",
            "\tR^2 Score = 0.7903929578441594\n",
            "Epoch 164:\n",
            "\tLoss = 35374.142507742115\n",
            "\tR^2 Score = 0.7790507515251981\n",
            "Epoch 165:\n",
            "\tLoss = 34990.022786458336\n",
            "\tR^2 Score = 0.7892796604445772\n",
            "Epoch 166:\n",
            "\tLoss = 35720.65818552928\n",
            "\tR^2 Score = 0.7837910167943302\n",
            "Epoch 167:\n",
            "\tLoss = 35071.88307643581\n",
            "\tR^2 Score = 0.792870829239386\n",
            "Epoch 168:\n",
            "\tLoss = 35034.90037302928\n",
            "\tR^2 Score = 0.793809629447667\n",
            "Epoch 169:\n",
            "\tLoss = 34952.40415610923\n",
            "\tR^2 Score = 0.7913611875746809\n",
            "Epoch 170:\n",
            "\tLoss = 34276.38967483108\n",
            "\tR^2 Score = 0.7953305356792018\n",
            "Epoch 171:\n",
            "\tLoss = 34845.41133516329\n",
            "\tR^2 Score = 0.7890849907248628\n",
            "Epoch 172:\n",
            "\tLoss = 35209.37485923423\n",
            "\tR^2 Score = 0.7827157899898821\n",
            "Epoch 173:\n",
            "\tLoss = 34833.63385064752\n",
            "\tR^2 Score = 0.7954788481228868\n",
            "Epoch 174:\n",
            "\tLoss = 34752.27783643018\n",
            "\tR^2 Score = 0.7996841563140069\n",
            "Epoch 175:\n",
            "\tLoss = 34413.53552576013\n",
            "\tR^2 Score = 0.7922514013842619\n",
            "Epoch 176:\n",
            "\tLoss = 34583.51330236487\n",
            "\tR^2 Score = 0.7985188924266216\n",
            "Epoch 177:\n",
            "\tLoss = 34407.31360853041\n",
            "\tR^2 Score = 0.8080200001505705\n",
            "Epoch 178:\n",
            "\tLoss = 34740.27115005631\n",
            "\tR^2 Score = 0.7934152009489001\n",
            "Epoch 179:\n",
            "\tLoss = 34620.282798423425\n",
            "\tR^2 Score = 0.789631595626182\n",
            "Epoch 180:\n",
            "\tLoss = 34303.26483319257\n",
            "\tR^2 Score = 0.79049902376558\n",
            "Epoch 181:\n",
            "\tLoss = 34004.820382882885\n",
            "\tR^2 Score = 0.798791781726835\n",
            "Epoch 182:\n",
            "\tLoss = 34223.59373240428\n",
            "\tR^2 Score = 0.8058071330864538\n",
            "Epoch 183:\n",
            "\tLoss = 34957.42479588964\n",
            "\tR^2 Score = 0.791163614705458\n",
            "Epoch 184:\n",
            "\tLoss = 34142.6674584741\n",
            "\tR^2 Score = 0.8044284598919047\n",
            "Epoch 185:\n",
            "\tLoss = 34202.75047508446\n",
            "\tR^2 Score = 0.8018789701079702\n",
            "Epoch 186:\n",
            "\tLoss = 33641.14373944257\n",
            "\tR^2 Score = 0.8105084967573972\n",
            "Epoch 187:\n",
            "\tLoss = 33891.39018510698\n",
            "\tR^2 Score = 0.8010230186552705\n",
            "Epoch 188:\n",
            "\tLoss = 33867.09923986487\n",
            "\tR^2 Score = 0.8036190680883352\n",
            "Epoch 189:\n",
            "\tLoss = 34032.26085655968\n",
            "\tR^2 Score = 0.8048076835041478\n",
            "Epoch 190:\n",
            "\tLoss = 34493.651041666664\n",
            "\tR^2 Score = 0.800475547610131\n",
            "Epoch 191:\n",
            "\tLoss = 33605.64727618243\n",
            "\tR^2 Score = 0.7968827082288006\n",
            "Epoch 192:\n",
            "\tLoss = 34153.372501407655\n",
            "\tR^2 Score = 0.800153087245853\n",
            "Epoch 193:\n",
            "\tLoss = 34042.89159276464\n",
            "\tR^2 Score = 0.8002028872856393\n",
            "Epoch 194:\n",
            "\tLoss = 34019.92567567567\n",
            "\tR^2 Score = 0.8003921658662535\n",
            "Epoch 195:\n",
            "\tLoss = 33827.75170678491\n",
            "\tR^2 Score = 0.8029487555327337\n",
            "Epoch 196:\n",
            "\tLoss = 33353.629310951575\n",
            "\tR^2 Score = 0.811934127840281\n",
            "Epoch 197:\n",
            "\tLoss = 34271.76224662162\n",
            "\tR^2 Score = 0.7938874781720647\n",
            "Epoch 198:\n",
            "\tLoss = 33797.428086289416\n",
            "\tR^2 Score = 0.792015915268983\n",
            "Epoch 199:\n",
            "\tLoss = 33795.78805954392\n",
            "\tR^2 Score = 0.8088475630380819\n",
            "Epoch 200:\n",
            "\tLoss = 33299.547279701575\n",
            "\tR^2 Score = 0.8085169037219821\n",
            "Epoch 201:\n",
            "\tLoss = 32912.05479307433\n",
            "\tR^2 Score = 0.8090927068380822\n",
            "Epoch 202:\n",
            "\tLoss = 33084.37524634009\n",
            "\tR^2 Score = 0.8079319083811562\n",
            "Epoch 203:\n",
            "\tLoss = 33151.07492257883\n",
            "\tR^2 Score = 0.8051290076065308\n",
            "Epoch 204:\n",
            "\tLoss = 33515.02173071509\n",
            "\tR^2 Score = 0.8001379914268586\n",
            "Epoch 205:\n",
            "\tLoss = 33852.57823057433\n",
            "\tR^2 Score = 0.8118924758966892\n",
            "Epoch 206:\n",
            "\tLoss = 32852.46848606419\n",
            "\tR^2 Score = 0.8070758553072951\n",
            "Epoch 207:\n",
            "\tLoss = 33448.84290540541\n",
            "\tR^2 Score = 0.8129368106156248\n",
            "Epoch 208:\n",
            "\tLoss = 33015.348008164416\n",
            "\tR^2 Score = 0.8096799702859909\n",
            "Epoch 209:\n",
            "\tLoss = 32936.08549760698\n",
            "\tR^2 Score = 0.8181793731341489\n",
            "Epoch 210:\n",
            "\tLoss = 32938.44965864302\n",
            "\tR^2 Score = 0.8145761507090369\n",
            "Epoch 211:\n",
            "\tLoss = 33144.39579814189\n",
            "\tR^2 Score = 0.8063051503812404\n",
            "Epoch 212:\n",
            "\tLoss = 33158.56932713964\n",
            "\tR^2 Score = 0.8124416194519346\n",
            "Epoch 213:\n",
            "\tLoss = 33434.21415751689\n",
            "\tR^2 Score = 0.8059798739793236\n",
            "Epoch 214:\n",
            "\tLoss = 33175.40887176239\n",
            "\tR^2 Score = 0.8118197160788765\n",
            "Epoch 215:\n",
            "\tLoss = 32790.542511261265\n",
            "\tR^2 Score = 0.8060082470315988\n",
            "Epoch 216:\n",
            "\tLoss = 32493.579990146398\n",
            "\tR^2 Score = 0.8170424937109702\n",
            "Epoch 217:\n",
            "\tLoss = 32418.03732052365\n",
            "\tR^2 Score = 0.8184461250329687\n",
            "Epoch 218:\n",
            "\tLoss = 33043.82522170608\n",
            "\tR^2 Score = 0.807110522429008\n",
            "Epoch 219:\n",
            "\tLoss = 32281.62111134572\n",
            "\tR^2 Score = 0.8220417192850791\n",
            "Epoch 220:\n",
            "\tLoss = 32938.327773085584\n",
            "\tR^2 Score = 0.8028283703282759\n",
            "Epoch 221:\n",
            "\tLoss = 32610.804370777027\n",
            "\tR^2 Score = 0.814144580698188\n",
            "Epoch 222:\n",
            "\tLoss = 32442.57810740428\n",
            "\tR^2 Score = 0.8108748483719139\n",
            "Epoch 223:\n",
            "\tLoss = 32620.13673634572\n",
            "\tR^2 Score = 0.8167342979967258\n",
            "Epoch 224:\n",
            "\tLoss = 32938.888742257885\n",
            "\tR^2 Score = 0.8138112619103595\n",
            "Epoch 225:\n",
            "\tLoss = 32260.137809684686\n",
            "\tR^2 Score = 0.8214038827917151\n",
            "Epoch 226:\n",
            "\tLoss = 32338.74975365991\n",
            "\tR^2 Score = 0.8261517691254162\n",
            "Epoch 227:\n",
            "\tLoss = 32180.953476914416\n",
            "\tR^2 Score = 0.8151361041196397\n",
            "Epoch 228:\n",
            "\tLoss = 32660.279156109234\n",
            "\tR^2 Score = 0.8053562088137218\n",
            "Epoch 229:\n",
            "\tLoss = 32639.517173423425\n",
            "\tR^2 Score = 0.8149710850407629\n",
            "Epoch 230:\n",
            "\tLoss = 32931.0101879223\n",
            "\tR^2 Score = 0.81738230157697\n",
            "Epoch 231:\n",
            "\tLoss = 32243.6807080518\n",
            "\tR^2 Score = 0.8237907032790894\n",
            "Epoch 232:\n",
            "\tLoss = 32489.107808980854\n",
            "\tR^2 Score = 0.8107546619949453\n",
            "Epoch 233:\n",
            "\tLoss = 31854.458086993243\n",
            "\tR^2 Score = 0.8168276670492115\n",
            "Epoch 234:\n",
            "\tLoss = 31909.267208614863\n",
            "\tR^2 Score = 0.8180587451897183\n",
            "Epoch 235:\n",
            "\tLoss = 31882.599838119368\n",
            "\tR^2 Score = 0.8301389395389727\n",
            "Epoch 236:\n",
            "\tLoss = 32202.43361134572\n",
            "\tR^2 Score = 0.8222943051934566\n",
            "Epoch 237:\n",
            "\tLoss = 32005.677382460584\n",
            "\tR^2 Score = 0.8182148258274006\n",
            "Epoch 238:\n",
            "\tLoss = 32387.20064400338\n",
            "\tR^2 Score = 0.8108618682460449\n",
            "Epoch 239:\n",
            "\tLoss = 31863.58790822072\n",
            "\tR^2 Score = 0.8118380119930991\n",
            "Epoch 240:\n",
            "\tLoss = 32688.637105855854\n",
            "\tR^2 Score = 0.8073620913720296\n",
            "Epoch 241:\n",
            "\tLoss = 32031.953424127252\n",
            "\tR^2 Score = 0.8184029270466004\n",
            "Epoch 242:\n",
            "\tLoss = 31886.879416525902\n",
            "\tR^2 Score = 0.8183903349073968\n",
            "Epoch 243:\n",
            "\tLoss = 32187.00316722973\n",
            "\tR^2 Score = 0.8249806302055929\n",
            "Epoch 244:\n",
            "\tLoss = 32075.694907798425\n",
            "\tR^2 Score = 0.8065748953594815\n",
            "Epoch 245:\n",
            "\tLoss = 31716.180127393018\n",
            "\tR^2 Score = 0.8161265537815866\n",
            "Epoch 246:\n",
            "\tLoss = 31363.241290118243\n",
            "\tR^2 Score = 0.8241794254791681\n",
            "Epoch 247:\n",
            "\tLoss = 31695.81781390766\n",
            "\tR^2 Score = 0.8276059177023821\n",
            "Epoch 248:\n",
            "\tLoss = 31735.723923141893\n",
            "\tR^2 Score = 0.8277177915744655\n",
            "Epoch 249:\n",
            "\tLoss = 31323.85986768018\n",
            "\tR^2 Score = 0.8232175265485323\n",
            "Epoch 250:\n",
            "\tLoss = 31174.952949042792\n",
            "\tR^2 Score = 0.8334097554577787\n",
            "Epoch 251:\n",
            "\tLoss = 31768.34082911036\n",
            "\tR^2 Score = 0.8139215240446879\n",
            "Epoch 252:\n",
            "\tLoss = 31437.05831221847\n",
            "\tR^2 Score = 0.8270999128550739\n",
            "Epoch 253:\n",
            "\tLoss = 31717.709353885137\n",
            "\tR^2 Score = 0.8223171693744419\n",
            "Epoch 254:\n",
            "\tLoss = 31748.06739161036\n",
            "\tR^2 Score = 0.8203211323046099\n",
            "Epoch 255:\n",
            "\tLoss = 31320.714051942567\n",
            "\tR^2 Score = 0.8275439490541924\n",
            "Epoch 256:\n",
            "\tLoss = 31716.367011542792\n",
            "\tR^2 Score = 0.8184955118431646\n",
            "Epoch 257:\n",
            "\tLoss = 31106.10888231982\n",
            "\tR^2 Score = 0.8229238460201761\n",
            "Epoch 258:\n",
            "\tLoss = 31569.265255489863\n",
            "\tR^2 Score = 0.8333035845030619\n",
            "Epoch 259:\n",
            "\tLoss = 31580.053596565314\n",
            "\tR^2 Score = 0.8208613168596409\n",
            "Epoch 260:\n",
            "\tLoss = 31054.139463682433\n",
            "\tR^2 Score = 0.8264110581265376\n",
            "Epoch 261:\n",
            "\tLoss = 31338.803297438062\n",
            "\tR^2 Score = 0.8334803068998191\n",
            "Epoch 262:\n",
            "\tLoss = 31326.089139921172\n",
            "\tR^2 Score = 0.8253343981576208\n",
            "Epoch 263:\n",
            "\tLoss = 31044.39352829392\n",
            "\tR^2 Score = 0.8245330648145079\n",
            "Epoch 264:\n",
            "\tLoss = 31438.93137668919\n",
            "\tR^2 Score = 0.8217480630916519\n",
            "Epoch 265:\n",
            "\tLoss = 31309.751882742115\n",
            "\tR^2 Score = 0.8241742414962956\n",
            "Epoch 266:\n",
            "\tLoss = 31099.018000422297\n",
            "\tR^2 Score = 0.8281759275879175\n",
            "Epoch 267:\n",
            "\tLoss = 31044.873346002252\n",
            "\tR^2 Score = 0.8278356667057463\n",
            "Epoch 268:\n",
            "\tLoss = 30783.652783643018\n",
            "\tR^2 Score = 0.8287663080226548\n",
            "Epoch 269:\n",
            "\tLoss = 31082.629803631757\n",
            "\tR^2 Score = 0.8201503927581821\n",
            "Epoch 270:\n",
            "\tLoss = 31348.03856981982\n",
            "\tR^2 Score = 0.8321550953379252\n",
            "Epoch 271:\n",
            "\tLoss = 30649.72021044482\n",
            "\tR^2 Score = 0.8341874010297995\n",
            "Epoch 272:\n",
            "\tLoss = 30797.608319256757\n",
            "\tR^2 Score = 0.8352245272641318\n",
            "Epoch 273:\n",
            "\tLoss = 31270.397751266893\n",
            "\tR^2 Score = 0.8295176897829148\n",
            "Epoch 274:\n",
            "\tLoss = 31045.722691441442\n",
            "\tR^2 Score = 0.8302686739322377\n",
            "Epoch 275:\n",
            "\tLoss = 30962.867803350226\n",
            "\tR^2 Score = 0.8266700196130916\n",
            "Epoch 276:\n",
            "\tLoss = 31211.018827421172\n",
            "\tR^2 Score = 0.8340941954167761\n",
            "Epoch 277:\n",
            "\tLoss = 30458.034733952703\n",
            "\tR^2 Score = 0.8317955886812616\n",
            "Epoch 278:\n",
            "\tLoss = 30671.962046030407\n",
            "\tR^2 Score = 0.8305747700548579\n",
            "Epoch 279:\n",
            "\tLoss = 30537.478832347973\n",
            "\tR^2 Score = 0.8315178510041406\n",
            "Epoch 280:\n",
            "\tLoss = 30664.029631193695\n",
            "\tR^2 Score = 0.8277470977302587\n",
            "Epoch 281:\n",
            "\tLoss = 30959.488932291668\n",
            "\tR^2 Score = 0.8308646211084263\n",
            "Epoch 282:\n",
            "\tLoss = 30352.253220016893\n",
            "\tR^2 Score = 0.8344946301467229\n",
            "Epoch 283:\n",
            "\tLoss = 30194.470368806305\n",
            "\tR^2 Score = 0.8367466385076265\n",
            "Epoch 284:\n",
            "\tLoss = 30767.5537549268\n",
            "\tR^2 Score = 0.8376898473469526\n",
            "Epoch 285:\n",
            "\tLoss = 30829.045009853602\n",
            "\tR^2 Score = 0.8228245330542046\n",
            "Epoch 286:\n",
            "\tLoss = 30285.45184051239\n",
            "\tR^2 Score = 0.8353948440404823\n",
            "Epoch 287:\n",
            "\tLoss = 29814.742504222973\n",
            "\tR^2 Score = 0.8413198834476281\n",
            "Epoch 288:\n",
            "\tLoss = 30244.922226914416\n",
            "\tR^2 Score = 0.8336704903403345\n",
            "Epoch 289:\n",
            "\tLoss = 29814.786194397522\n",
            "\tR^2 Score = 0.8395926678289158\n",
            "Epoch 290:\n",
            "\tLoss = 30658.327790681305\n",
            "\tR^2 Score = 0.824551970225625\n",
            "Epoch 291:\n",
            "\tLoss = 29806.415100647522\n",
            "\tR^2 Score = 0.8380025908402334\n",
            "Epoch 292:\n",
            "\tLoss = 30062.49825802365\n",
            "\tR^2 Score = 0.8375256969391758\n",
            "Epoch 293:\n",
            "\tLoss = 30736.452949042792\n",
            "\tR^2 Score = 0.8391858182434528\n",
            "Epoch 294:\n",
            "\tLoss = 30185.601263372748\n",
            "\tR^2 Score = 0.8299761494370705\n",
            "Epoch 295:\n",
            "\tLoss = 30093.712943412163\n",
            "\tR^2 Score = 0.8337574979608153\n",
            "Epoch 296:\n",
            "\tLoss = 30460.651252815314\n",
            "\tR^2 Score = 0.8302719798481618\n",
            "Epoch 297:\n",
            "\tLoss = 30192.056992539416\n",
            "\tR^2 Score = 0.8362484893491311\n",
            "Epoch 298:\n",
            "\tLoss = 30589.738967483107\n",
            "\tR^2 Score = 0.8306017301391156\n",
            "Epoch 299:\n",
            "\tLoss = 30397.351157798425\n",
            "\tR^2 Score = 0.8318657006014424\n",
            "Epoch 300:\n",
            "\tLoss = 30675.13700028153\n",
            "\tR^2 Score = 0.8342060890918158\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TIeKdSvzO3N1",
        "colab_type": "code",
        "outputId": "9a88b1cd-d116-48cb-9492-029b45f0fc4b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "#Test the testing dataset using trained model\n",
        "inputs = torch.from_numpy(x_test_np).cuda().float()\n",
        "outputs = torch.from_numpy(y_test_np.reshape(y_test_np.shape[0], 1)).cuda().float()\n",
        "\n",
        "#Create a dataloader instance to work with our batches\n",
        "tensor = TensorDataset(inputs, outputs)\n",
        "loader = DataLoader(tensor, batch_size, shuffle=True, drop_last=True)\n",
        "\n",
        "avg_loss, avg_r2_score = model_loss(model, loader)\n",
        "print(\"The model's L1loss is:\" + str(avg_loss))\n",
        "print(\"The model's R^2score is:\" + str(avg_r2_score))"
      ],
      "execution_count": 582,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The model's L1loss is:38160.03561336436\n",
            "The model's R^2score is:0.7611554347888434\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g29nn9HSagGh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "234b4ef8-5f83-4ce6-f198-e63099400222"
      },
      "source": [
        "# Save the model in a file\n",
        "modelSaved = {'model': CnnRegressor(128,8,1),\n",
        "          'state_dict': model.state_dict(),\n",
        "          'optimizer' : optimizer.state_dict()}\n",
        "torch.save(modelSaved, '1095709_1dconv_reg')"
      ],
      "execution_count": 583,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/torch/serialization.py:360: UserWarning: Couldn't retrieve source code for container of type CnnRegressor. It won't be checked for correctness upon loading.\n",
            "  \"type \" + obj.__name__ + \". It won't be checked \"\n"
          ],
          "name": "stderr"
        }
      ]
    }
  ]
}